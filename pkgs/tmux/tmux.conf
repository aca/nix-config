# https://gitlab.com/gnachman/iterm2/-/issues/10530
unbind-key C-b
set -g prefix C-Space
set -g mode-keys vi
setw -g aggressive-resize on
set -g allow-passthrough on # for OSC52 https://github.com/sunaku/home/blob/c9760faca91b6ff356d158209aba06a3dec4fb30/bin/yank#L23C5-L23C46
set -g remain-on-exit on

set default-terminal "tmux-256color"
set -as terminal-features ",gnome*:RGB" # RGB
set -as terminal-overrides ",*:U8=0" # continuous lines

 # move left,right pane with `;`,`'`
bind-key -r "'" next-window
bind-key -r \; previous-window

bind-key BSpace last-window
# bind-key Tab last-pane

bind-key x kill-pane # kill
bind-key X kill-window

bind-key z set-option -g status # toggle status
# bind-key S swap-pane -D       # swap current pane with the next one
bind-key up swap-pane -U
bind-key down swap-pane -D
bind-key r swap-pane -U         # rotate pane
bind-key B break-pane
bind-key = select-layout even-horizontal
bind-key - select-layout even-vertical

# bind-key b split-window "bash -c $(pbpaste); read"
bind-key P choose-buffer   # buffer list
bind-key p paste-buffer -p # paste from the top paste buffer
# bind-key b run-shell "tmux.run-in-split.clipboard"

bind-key J display-message "take pane"\; choose-window 'join-pane -v -s "%%"'
# bind-key J join-pane -t:{last} # send pane to last window

bind-key R source-file ${HOME}/.tmux.conf \; display-message "tmux reloaded"

bind-key t move-pane -t bg # run in bg session

# set esc to exit from copy-mode-vi # tmux list-keys | grep "send-keys -X cancel"
bind-key -T copy-mode-vi Escape send-keys -X stop-selection
bind-key -T copy-mode-vi q send-keys -X stop-selection

unbind-key -T copy-mode-vi Space

unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi q send-keys -X copy-selection

# TODO: xdg-open in buffer mode
# bind-key -T copy-mode-vi x run-shell "cd #{pane_current_path}; nvr-open #{copy_cursor_word}"

# pane_path relies on OSC 7
bind-key Space split-window -c "#{pane_path}" -p 25 # create small pane below
bind-key c new-window -c "#{pane_path}"
bind-key '"' split-window -c "#{pane_path}"
bind-key % split-window -h -c "#{pane_path}"

bind-key C-b setw synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# search reverse order
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

# TODO: Replace with OSC52
# https://github.com/tmux/tmux/wiki/Clipboard
# replaced with allow-passthrough
set-option -g set-clipboard on
# set-option -g set-clipboard external

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

set -g status on
set -g status-left ''
set -g status-right ''
set -g status-bg "#1a1a1a"
set -g status-fg "#4a4949"
set -g status-left-length 250
set -g status-right-length 250
set -g pane-border-style 'fg=#1C3333'
set -g pane-active-border-style 'fg=#1C3333'
set -g window-status-format '#I:#W'
set -g automatic-rename-format "#{b:pane_path}"
set -g mouse off
set -g history-limit 100000
set -g pane-base-index 1
set -g focus-events on
set -g renumber-windows on
# set -s copy-command 'xsel -i'
set -g status-interval 2
# Don't wait for an escape sequence after seeing C-Space. https://github.com/tmux/tmux/issues/353#issuecomment-294570322
set -sg escape-time 0
set -g wrap-search off # Don't wrap searches
set -g visual-activity off
set -g visual-bell off
set -g bell-action none
set -g visual-silence on

set-environment -g SHLVL 0 # Shell Level start from 1
set -g default-shell /bin/sh
# set -g default-command "$(which bash)"
set -g default-command "$(which elvish 2>/dev/null || which bash 2>/dev/null)"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# doesn't work on busybox ps, install procps
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?\.?(view|n?vim?x?)(-wrapped)?(diff)?$'"

bind-key -n 'C-h' if-shell -b "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell -b "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell -b "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell -b "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind -T copy-mode-vi C-h "select-pane -L"
bind -T copy-mode-vi C-j "select-pane -D"
bind -T copy-mode-vi C-k "select-pane -U"
bind -T copy-mode-vi C-l "select-pane -R"

bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "resize-pane -L 7"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "resize-pane -D 7"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "resize-pane -U 7"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "resize-pane -R 7"

bind-key -T copy-mode-vi M-h resize-pane -L 7
bind-key -T copy-mode-vi M-j resize-pane -D 7
bind-key -T copy-mode-vi M-k resize-pane -U 7
bind-key -T copy-mode-vi M-l resize-pane -R 7

if "[[ ${SSH} =~ 256color ]]" 'set -g default-terminal screen-256color'

# if-shell '[ -n "$SSH_TTY" ]' 'set-hook -g pane-focus-out "run-shell \"tmux refresh-client -l\""'
# if-shell '[ -n "$SSH_TTY" ]' 'set-hook -g pane-focus-in "run-shell \"tmux refresh-client -l\""'
# if-shell '[ -n "$SSH_TTY" ]' 'set-hook -g client-attached "run-shell \"tmux refresh-client -l\""'

# osc52 sync
# set-hook -g pane-focus-out  'run-shell "tmux refresh-client -l"'
# set-hook -g pane-focus-in   'run-shell "tmux refresh-client -l"'
# set-hook -g client-attached 'run-shell "tmux refresh-client -l"'

# OSC-133
bind-key -T copy-mode-vi c-p send-keys -X previous-prompt
bind-key -T copy-mode-vi c-n send-keys -X next-prompt

set -g status-position bottom
set -g window-status-current-format '#[italics]#W'
set -g status-justify centre
